datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:DA-F3B1A5-bgf4Dga5cbEGC6B-Eg*Cdg@monorail.proxy.rlwy.net:18987/railway"
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
// TODO: Please remove the following example:
//model UserExample {
//  id    Int     @id @default(autoincrement())
//  email String  @unique
//  name  String?
//}

model User {
  id                 Int             @id @default(autoincrement())
  username           String
  name               String          @default("|")
  email              String          @unique
  firebaseUid        String          @unique
  pomodoroLength     Int             @default(25)
  pomodoroShort      Int             @default(5)
  pomodoroLong       Int             @default(10)
  pomodorosCompleted Int?            @default(0) // Reset to 0 once day changes
  darkMode           Boolean         @default(false)
  pomodoros          PomodoroTimer[] @relation("UserTimer")
  tasks              Task[]          @relation("UserTasks")
  appointments       Appointment[]   @relation("UserAppointments")
  refreshToken       String          @default("")
}

// To be done next sprint: uncompleted items need to rolled over to the next day and have their group level dropped by one
enum ImportanceGroup {
  TopPriority // When adding do - "ImportanceGroup: ImportanceGroup.TopPriority". Ensure that there are only 3 tasks marked as TopPriority for a given day, force as Important or lower otherwise
  Important // When adding do - "ImportanceGroup: ImportanceGroup.Important"
  Other // When adding do - "ImportanceGroup: ImportanceGroup.Other"
}

model Task {
  id                 Int              @id @default(autoincrement())
  taskName           String
  ImportanceGroup    ImportanceGroup? // TopPriority, Important, or Other
  completionStatus   Boolean          @default(false)
  taskStatus         String           @default("Not Started")
  description        String?
  pomodoroTimers     Int // Number of times it runs a given day. May be unneeded.
  pomodorosCompleted Int?             @default(0)
  pomodoroTimerType  String?
  taskOrder          Int // Must be filled in at the backend. Represents the order of tasks within their respective groupStatus. The value must be calculated based on the tasks within the same groupStatus.
  createdBy          String
  created_by         User             @relation("UserTasks", fields: [createdBy], references: [firebaseUid], onDelete: Cascade)
  pomodoro           PomodoroTimer[]  @relation("TaskTimer")
  taskDates          TaskDate[]       @relation("TaskDate")
  appointments       Appointment[]    @relation("TaskAppointment")
}

model Appointment {
  id        Int      @id @default(autoincrement())
  name      String?
  startTime DateTime
  endTime   DateTime
  category  String
  userId    String
  user      User     @relation("UserAppointments", fields: [userId], references: [firebaseUid], onDelete: Cascade)
  taskID    Int
  task      Task     @relation("TaskAppointment", fields: [taskID], references: [id], onDelete: Cascade)
}

model TaskDate {
  id     Int  @id @default(autoincrement())
  day    Int
  month  Int
  year   Int
  taskId Int
  task   Task @relation("TaskDate", fields: [taskId], references: [id], onDelete: Cascade)
}

model PomodoroTimer {
  id       Int    @id @default(autoincrement())
  pomodoro Int // Time in minutes for regular pomodoros
  short    Int // Time in minutes for short breaks
  long     Int // Time in minutes for long breaks
  userId   String
  taskId   Int
  user     User   @relation("UserTimer", fields: [userId], references: [firebaseUid], onDelete: Cascade)
  task     Task   @relation("TaskTimer", fields: [taskId], references: [id], onDelete: Cascade)
}
